const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')

const Koa = require('koa')
const app = new Koa()
const serve = require('koa-static')
// const serve = require('koa-static-server')
const compress = require('koa-compress')
const favicon = require('koa-favicon')
const router = require('koa-router')()


const resolve = file => path.resolve(__dirname, file)
const { createBundleRenderer } = require('vue-server-renderer')

const isProd = process.env.NODE_ENV === 'production'
const useMicroCache = process.env.MICRO_CACHE !== 'false'
const serverInfo =
  `express/${require('koa/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`


const template = fs.readFileSync(resolve('./src/index.template.html'), 'utf-8')

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    template,
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer
let readyPromise
if (isProd) {
  // In production: create server renderer using built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const bundle = require('./dist/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(app, (bundle, options) => {
    renderer = createRenderer(bundle, options)
  })
}


app.use(favicon(path.resolve(__dirname, 'src/assets/logo.png')))
app.use(compress())


app.use(serve(resolve('/dist')))
app.use(serve(resolve('./public')))
app.use(serve(resolve('./manifest.json')))
app.use(serve(resolve('./dist/service-worker.js')))

// router.get('/dist', serve(resolve('./dist')));


// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
const microCache = LRU({
  max: 100,
  maxAge: 1000
})

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
const isCacheable = req => useMicroCache

function render (ctx, next) {
  const s = Date.now()

  // res.setHeader("Content-Type", "text/html")
  // res.setHeader("Server", serverInfo)
  ctx.set("Content-Type", "text/html")
  ctx.set("Server", serverInfo)

  const handleError = (err,reject) => {
    if (err.url) {
      console.log('重定向')
      ctx.redirect(err.url)
    } else if(err.code === 404) {
      ctx.status = 404
      ctx.body = '404 | Page Not Found'
    } else {
      // Render Error Page or Redirect
      ctx.status = 500
      ctx.body = '500 | Internal Server Error'
      console.error(`error during render : ${ctx.url}`)
      console.error(err.stack)
    }
    reject()
  }

  const cacheable = isCacheable(ctx.req)
  if (cacheable) {
    const hit = microCache.get(ctx.url)
    if (hit) {
      if (!isProd) {
        console.log(`cache hit!`)
      }
      return ctx.end(hit)
    }
  }

  const context = {
    title: 'Vue HN 2.0', // default title
    url: ctx.url
  }
  return new Promise((resolve, reject) => {
    renderer.renderToString(context, (err, html) => {
      if (err) {
        return handleError(err,reject)
      }
      ctx.body =  html
      resolve()
      if (cacheable) {
        microCache.set(ctx.url, html)
      }
      if (!isProd) {
        console.log(`whole request: ${Date.now() - s}ms`)
      }
      return next()
    })
  }).catch( (err)=>{
    return next()
  })
}

app.use( (ctx, next) =>{
  if(isProd){
    return render(ctx, next)
  } else{
    return readyPromise.then(() => render(ctx, next))
  }
})

app
    .use(router.routes())
    .use(router.allowedMethods());

const port = process.env.PORT || 8080
app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})
